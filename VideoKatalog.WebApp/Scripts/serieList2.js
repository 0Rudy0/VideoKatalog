//#region GLOBAL VARIABLES
// =========================================================================
//                              GLOBAL VARIABLES
// =========================================================================

// if orientation is supported (eg. mobile device) 
// instead of resize, do the orientation event
var supportsOrientationChange = 'onorientationchange' in window,
    orientationEvent = supportsOrientationChange ? 'orientationchange' : 'resize';

var sortPropertyChanged = false;
var isFirstLoad = true;

var serieArray = new Array();
var seasonArray = new Array();
var episodeArray = new Array();
var serieArrayFiltered = new Array();
var serieFilter = new SerieFilter();
var serieFullArray = new Array();
var selectedSerieGlobal = new Serie();

var currentImdLink = '';
var currentTrailerLink = '';

var ratingStep = 0.5;
var ratingMin = 1;
var ratingMax = 10;

//#endregion

//#region FUNCTIONS
// =========================================================================
//                                FUNCTIONS
// =========================================================================


function Serie() {
	this.id;
	this.name;
	this.origName;
	this.rating;
	this.internetLink;
	this.trailerLink;
	this.cast;
	this.director;
	this.genres;
	this.seasons = new Array();
}
function SerieSeason() {
	this.id;
	this.serieID;
	this.name;
	this.internetLink;
	this.trailerLink;
	this.episodes = new Array();
}
function SerieEpisode() {
	this.id;
	this.name;
	this.origName;
	this.seasonID;
	this.airDate;
	this.size;
	this.runtime;
	this.hddID;
	this.summary;
	this.internetLink;
	this.hasCroSub;
	this.hasEngSub;
}
function SerieFilter() {
	this.sortProperty = 'name';
	this.minRating = 0;
	this.maxRating = 10;
	this.name = '';
	this.showSelected = false;
	this.genre = new Array();
}

function getSeriesCompact(treeControlID) {
	$('#mainLoading').css('display', 'block');
	$.ajax({
		url: 'allSeriesOrdered',
		type: "GET",
		data: {
			sortProperty: serieFilter.sortProperty
		},
		dataType: "text",
		async: true,
		cache: false,
		success: function (msg) {
			//return;
			if (msg.indexOf('<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->') > -1) {
				msg = msg.substring(0, msg.indexOf("<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->"));
			}
			var result = jQuery.parseJSON(msg);
			sortPropertyChanged = false;
			serieArray = jsonAsTextToSerieList(JSON.stringify(result.series), true);
			$('#mainLoading').css('display', 'none');

			if (isFirstLoad) {
				filterSeries('#serieTree');
				serieFilter.showSelected = true;
				filterSeries('#selectedSerieTree');
				serieFilter.showSelected = false;
				isFirstLoad = false;
			}
			else {
				filterSeries(treeControlID);
			}
			$('#mainLoading').css('display', 'none');
		},
		error: function (e) {
			$('body').html(e.responseText);
			//alert('error');
			//$("#reloadIndicator").css("display", "none");
			//$("#miniReloadDiv").css("display", "none");
			//$("#reloadDiv").css("display", "none");
			//$("#labelCount").html(movies.length);
		}
	});
}
function getSingleFullSerie(serieID) {
	$('#mainLoading').css('display', 'block');
	$.ajax({
		url: 'getFullSerie',
		type: "GET",
		data: {
			serieID: serieID
		},
		dataType: "text",
		async: true,
		cache: false,
		success: function (msg) {
			//return;
			if (msg.indexOf('<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->') > -1) {
				msg = msg.substring(0, msg.indexOf("<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->"));
			}
			var result = jQuery.parseJSON(msg);
			serieFullArray.push(result);
			selectedSerieGlobal = result;
			$('#mainLoading').css('display', 'none');


			changeSerieInfo(serieID, null);
		},
		error: function (e) {
			$('body').html(e.responseText);
		}
	});
}
function addSeasonsAndEpisodes(selectedSerie, fullSerie) {
	if (selectedSerie.hasItems) {
		return;
	}
	var seasons = new Array();
	for (var i = 0; i < fullSerie.seasons.length; i++) {
		//ako se prikazuju odabrani
		if (serieFilter.showSelected) {
			if (isSeasonSelected(fullSerie.seasons[i].id, fullSerie.id, false)) {
				var episodes = new Array();
				for (var j = 0; j < fullSerie.seasons[i].episodes.length; j++) {
					if (isEpisodeSelected(fullSerie.seasons[i].episodes[j].id, fullSerie.seasons[i].id, fullSerie.id, false)) {
						episodes.push({
							id: "E" + fullSerie.seasons[i].episodes[j].id,
							label: fullSerie.seasons[i].episodes[j].name,
							value: 'episode'
						})
					}
				}
				seasons.push({
					id: "S" + fullSerie.seasons[i].id,
					label: fullSerie.seasons[i].name,
					value: 'season',
					items: episodes
				});
			}
		}
		else {
			var episodes = new Array();
			for (var j = 0; j < fullSerie.seasons[i].episodes.length; j++) {
				episodes.push({
					id: "E" + fullSerie.seasons[i].episodes[j].id,
					label: fullSerie.seasons[i].episodes[j].name,
					value: 'episode'
				})
			}
			seasons.push({
				id: "S" + fullSerie.seasons[i].id,
				label: fullSerie.seasons[i].name,
				value: 'season',
				items: episodes
			});

		}


	}
	if (serieFilter.showSelected) {
		$('#selectedSerieTree').jqxTree('addTo', seasons, selectedSerie);
		//$("#selectedSerieTree").jqxTree('expandItem', $('#' + selectedSerie.id)[0]);
		//$('#selectedSerieTree').jqxTree('expandItem', { id: selectedSerie.id });
	}
	else {
		$('#serieTree').jqxTree('addTo', seasons, selectedSerie);
		//$('#serieTree').jqxTree('expandItem', { id: selectedSerie.id });
	}
}
function jsonAsTextToSerieList(text, isFullJson) {
	var result = jQuery.parseJSON(text);
	if (result.length == 0) {
		return;
	}
	var newSeries = new Array();
	for (var i = 0; i < result.length; i++) {
		newSeries.push(jsonToSerie(result[i], true));
	}
	return newSeries;
}
function jsonToSerie(jsonSerie, isFromServer) {
	var newSerie = new Serie();

	newSerie.id = jsonSerie.id;
	newSerie.name = jsonSerie.name;
	newSerie.origName = jsonSerie.origName;
	newSerie.rating = jsonSerie.rating;
	newSerie.internetLink = jsonSerie.internetLink;
	newSerie.trailerLink = jsonSerie.trailerLink;
	newSerie.cast = jsonSerie.cast;
	newSerie.director = jsonSerie.director;
	newSerie.genres = jsonSerie.genres;
	return newSerie;
}

function initTree() {
	//filterSeries();
	//var source = new Array();
	//for (var i = 0; i < serieArrayFiltered.length; i++) {
	//	source.push({
	//		id: serieArrayFiltered[i].id,
	//		label: serieArrayFiltered[i].name,
	//		value: 'serie'
	//	})

	//}

	//$('#serieTree').jqxTree('clear');
	$('#serieTree').jqxTree({
		source: new Array(),
		width: $('#listboxDiv').width(),
		height: $('#listboxDiv').height() - $('#listSearch').height() - 20,
		//width: '50%',
		//height: '50%',
		theme: 'metrodark',
		toggleMode: 'dblclick',
		toggleIndicatorSize: 15
	});

	$('#serieTree').on('select', function (event) {
		//return;
		var args = event.args;
		var item = $('#serieTree').jqxTree('getItem', args.element)
		if (item.value == 'serie') {
			changeSerieInfo(parseInt(item.id), item.label);
		}
		else if (item.value == 'season') {
			if (item.element.parentNode.parentNode.id.indexOf('S') >= 0) {
				var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
				changeSeasonInfo(parseInt(item.id.substring(1)), serieID);
				//$('#serieTree').jqxTree('selectItem', {id: item);
			}
			else {
				var serieID = parseInt(item.element.parentNode.parentNode.id);
				changeSeasonInfo(parseInt(item.id.substring(1)), serieID);
			}
		}
		else if (item.value == 'episode') {
			if (item.element.parentNode.parentNode.parentNode.parentNode.id.indexOf('E') >= 0) {
				var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
				var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.id);
				changeEpisodeInfo(parseInt(item.id.substring(1)), seasonID, serieID);			
			}
			else {
				var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
				var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
				changeEpisodeInfo(parseInt(item.id.substring(1)), seasonID, serieID);
			}
		}
	});

	$('#selectedSerieTree').jqxTree({
		source: new Array(),
		width: $('#listboxDiv').width(),
		height: $('#listboxDiv').height() - $('#listSearch').height() - 20,
		//width: '50%',
		//height: '50%',
		theme: 'metrodark',
		toggleMode: 'dblclick',
		toggleIndicatorSize: 15
	});

	$('#selectedSerieTree').on('select', function (event) {
		var args = event.args;
		var item = $('#selectedSerieTree').jqxTree('getItem', args.element)
		if (item.value == 'serie') {
			changeSerieInfo(parseInt(item.id), item.label);
		}
		else if (item.value == 'season') {
			var serieID = parseInt(item.element.parentNode.parentNode.id);
			changeSeasonInfo(parseInt(item.id.substring(1)), serieID);
		}
		else if (item.value == 'episode') {
			var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
			var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
			changeEpisodeInfo(parseInt(item.id.substring(1)), seasonID, serieID);
		}
	});

	filterSeries("#serieTree");
}
function addToTreeRoot(treeElementID, element) {
	var treeItems = $(treeElementID).jqxTree('getItems');
	if (false) {
		var lastItem = treeItems[treeItems.length - 1];
		var lastItemElement = lastItem.element;
		$(treeElementID).jqxTree('addAfter', element, lastItemElement);
	}
	else {
		$(treeElementID).jqxTree('addAfter', element, null);
	}
}
function initInput() {
	$("#listSearch").jqxInput({
		placeHolder: "Pretraži serije...",
		height: 40,
		width: $('#listboxDiv').width() - ($('#listboxDiv').width() * 0.02)
	});
}

function filterSeries(treeElementID) {
	if (sortPropertyChanged) {
		getSeriesCompact(treeElementID);
		return;
	}

	$(treeElementID).jqxTree('clear');
	serieArrayFiltered = new Array();
	for (var i = 0; i < serieArray.length; i++) {
		if (serieArray[i].name.trim().toLowerCase().indexOf(serieFilter.name) < 0)
			continue;
		if (serieArray[i].rating < serieFilter.minRating || serieArray[i].rating > serieFilter.maxRating)
			continue;

		var hasGenre = false;
		for (var j = 0; j < serieFilter.genre.length; j++) {
			if (serieArray[i].genres.trim().toLowerCase().indexOf(serieFilter.genre[j].trim().toLowerCase()) >= 0) {
				hasGenre = true;
				break;
			}
		}
		if (!hasGenre && serieFilter.genre.length > 0) {
			continue;
		}

		//ako serija zadovoljava filtere te 
		//ako je serija dodana (u cjelosti ili dio serije, dodaj ju u slucaju da se prikazuje dodano)
		if (serieFilter.showSelected) {
			if (isSerieSelected(serieArray[i].id) == false) {
				continue;
			}
			serieArrayFiltered.push({
				id: serieArray[i].id,
				label: serieArray[i].name,
				value: 'serie'
			});
		}
		//dodaj seriju ako zadovoljava kriterije filtera
		else {			
			serieArrayFiltered.push({
				id: serieArray[i].id,
				label: serieArray[i].name,
				value: 'serie'
			});


		}
	}
	addToTreeRoot(treeElementID, serieArrayFiltered);
}

function changeSerieInfo(serieID, serieName) {
	var foundFull = false;
	var selectedSerieFull = null;
	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerieFull = serieFullArray[i];
			foundFull = true;
			selectedSerieGlobal = serieFullArray[i];
			break;
		}
	}

	if (serieName != null) {
	    
		var posterLink = "http://hddpunjenje.herobo.com/posters/serie/" + serieName.replace("&#39;", "'").replace("&amp;", "&") + ".jpg";
		var replaced = true;
		while (replaced) {
		    replaced = false;
		    if (posterLink.indexOf("'") >= 0) {
		        posterLink = posterLink.replace("'", '%27');
		        replaced = true;
		    }
		}
		$('#loadingPosterIndicator').css('display', 'block');
		$('#seriePoster').css('display', 'none');
		//$('#seriePoster').css('background-image', "url('http://hddpunjenje.herobo.com/posters/loader1.gif')");
		//$('#moviePoster').css('background-image', "url('" + posterLink + "')");
		$.ajax({
			url: posterLink,
			type: "GET",
			cache: true,
			processData: false,
		}).always(function () {
			$('#seriePoster').css('background-image', "url('" + posterLink + "')");
			$('#seriePoster').css('display', 'block');
			$('#loadingPosterIndicator').css('display', 'none');
		});
	}


	$('#serieName').html("");
	$('#serieYear').html("");
	$('#ratingText').html("");
	$('#cast').html("");
	$('#director').html("");
	$('#plot').html("");
	$('#runtime').html("");
	$('#size').html("");
	$('#genres').html("");
	$('#serieYear').prop('title', '');


	if (foundFull) {
		if (serieFilter.showSelected) {
			addSeasonsAndEpisodes($('#selectedSerieTree').jqxTree('getItem', { id: selectedSerieFull.id }), selectedSerieFull);
		}
		else {
			addSeasonsAndEpisodes($('#serieTree').jqxTree('getItem', { id: selectedSerieFull.id }), selectedSerieFull);
		}

		$('#serieName').html(selectedSerieFull.origName);
		$('#ratingText').html(selectedSerieFull.rating);
		$('#cast').html(selectedSerieFull.cast);
		$('#director').html(selectedSerieFull.director);
		$('#plot').html(removeHyperlinks(selectedSerieFull.summary));
		$('#genres').html(selectedSerieFull.genres);

		var totalSerieInfo = getTotalSerieInfo(selectedSerieFull);
		$('#serieYear').prop('title', '');
		$('#serieYear').html(totalSerieInfo.minDate.getFullYear() + ' - ' + totalSerieInfo.maxDate.getFullYear());
		$('#runtime').html(getRuntimeInText(totalSerieInfo.totalRuntime));
		$('#size').html(formatFloat(getSize(totalSerieInfo.totalSize), 1) + " GB");
		$('#croSubIcon').prop("title", totalSerieInfo.totalHasCroSub + " / " + totalSerieInfo.totalEpisodes +
			" (" + formatFloat(totalSerieInfo.totalHasCroSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%)");
		$('#croSubPercentage').css('display', 'block');
		$('#croSubPercentage').html(formatFloat(totalSerieInfo.totalHasCroSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%");

		$('#engSubIcon').prop("title", totalSerieInfo.totalHasEngSub + " / " + totalSerieInfo.totalEpisodes +
			" (" + formatFloat(totalSerieInfo.totalHasEngSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%)");
		$('#engSubPercentage').css('display', 'block');
		$('#engSubPercentage').html(formatFloat(totalSerieInfo.totalHasEngSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%");

		$('#croSubIcon').addClass('noSub');
		$('#croSubIcon').removeClass('hasSub');
		$('#engSubIcon').addClass('noSub');
		$('#engSubIcon').removeClass('hasSub');

		if (totalSerieInfo.totalHasCroSub > 0) {
			$('#croSubIcon').addClass('hasSub');
			$('#croSubIcon').removeClass('noSub');
		}
		if (totalSerieInfo.totalHasEngSub > 0) {
			$('#engSubIcon').addClass('hasSub');
			$('#engSubIcon').removeClass('noSub');
		}
		currentImdLink = selectedSerieFull.internetLink;
		currentTrailerLink = selectedSerieFull.trailerLink;
	}
	else {
		getSingleFullSerie(serieID);
	}
}
function changeSeasonInfo(seasonID, serieID) {
	var totalSeasonInfo = null;
	var selectedSerie = null;
	var selectedSeason = null;
	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerie = serieFullArray[i];
			for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
				if (serieFullArray[i].seasons[j].id == seasonID) {
					totalSeasonInfo = getTotalSeasonInfo(serieFullArray[i].seasons[j]);
					selectedSeason = serieFullArray[i].seasons[j];
					break;
				}
			}
			break;
		}
	}
	changeSerieInfo(serieID, selectedSerie.name);
	$('#serieName').html(selectedSerie.origName + ": " + selectedSeason.name);
	$('#ratingText').html(selectedSerie.rating);
	$('#cast').html(selectedSerie.cast);
	$('#director').html(selectedSerie.director);
	$('#plot').html(selectedSerie.summary);
	$('#genres').html(selectedSerie.genres);

	//var totalSerieInfo = getTotalSerieInfo(selectedSerieFull);
	$('#serieYear').prop('title', '');
	$('#serieYear').html(totalSeasonInfo.minDate.getFullYear() + ' - ' + totalSeasonInfo.maxDate.getFullYear());
	$('#runtime').html(getRuntimeInText(totalSeasonInfo.totalRuntime));
	$('#size').html(formatFloat(getSize(totalSeasonInfo.totalSize), 1) + " GB");
	$('#croSubIcon').prop("title", totalSeasonInfo.totalHasCroSub + " / " + totalSeasonInfo.totalEpisodes +
		" (" + formatFloat(totalSeasonInfo.totalHasCroSub * 100 / totalSeasonInfo.totalEpisodes, 0) + "%)");
	$('#croSubPercentage').css('display', 'block');
	$('#croSubPercentage').html(formatFloat(totalSeasonInfo.totalHasCroSub * 100 / totalSeasonInfo.totalEpisodes, 0) + "%");

	$('#engSubIcon').prop("title", totalSeasonInfo.totalHasEngSub + " / " + totalSeasonInfo.totalEpisodes +
		" (" + formatFloat(totalSeasonInfo.totalHasEngSub * 100 / totalSeasonInfo.totalEpisodes, 0) + "%)");
	$('#engSubPercentage').css('display', 'block');
	$('#engSubPercentage').html(formatFloat(totalSeasonInfo.totalHasEngSub * 100 / totalSeasonInfo.totalEpisodes, 0) + "%");

	$('#croSubIcon').addClass('noSub');
	$('#croSubIcon').removeClass('hasSub');
	$('#engSubIcon').addClass('noSub');
	$('#engSubIcon').removeClass('hasSub');

	if (totalSeasonInfo.totalHasCroSub > 0) {
		$('#croSubIcon').addClass('hasSub');
		$('#croSubIcon').removeClass('noSub');
	}
	if (totalSeasonInfo.totalHasEngSub > 0) {
		$('#engSubIcon').addClass('hasSub');
		$('#engSubIcon').removeClass('noSub');
	}
	currentImdLink = selectedSeason.internetLink;
	currentTrailerLink = selectedSerie.trailerLink;
}
function changeEpisodeInfo(episodeID, seasonID, serieID) {
	var selectedSerie = null;
	var selectedSeason = null;
	var selectedEpisode = null;
	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerie = serieFullArray[i];
			for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
				if (serieFullArray[i].seasons[j].id == seasonID) {
					totalSeasonInfo = getTotalSeasonInfo(serieFullArray[i].seasons[j]);
					selectedSeason = serieFullArray[i].seasons[j];
					for (var k = 0; k < serieFullArray[i].seasons[j].episodes.length; k++) {
						if (serieFullArray[i].seasons[j].episodes[k].id == episodeID) {
							selectedEpisode = serieFullArray[i].seasons[j].episodes[k];
							break;
						}
					}
					break;
				}
			}
			break;
		}
	}
	//return;

	changeSerieInfo(serieID, selectedSerie.name);
	$('#serieName').html(selectedEpisode.name);
	$('#ratingText').html(selectedSerie.rating);
	$('#cast').html(selectedSerie.cast);
	$('#director').html(selectedSerie.director);
	$('#plot').html(removeHyperlinks(selectedEpisode.summary));
	$('#genres').html(selectedSerie.genres);

	var totalSerieInfo = getTotalSerieInfo(selectedSerie);
	$('#serieYear').prop('title', '');
	$('#serieYear').html(new Date(selectedEpisode.airDate).toLocaleDateString());
	$('#runtime').html(getRuntimeInText(selectedEpisode.runtime));
	$('#size').html(formatFloat(getSize(selectedEpisode.size), 1) + " GB");
	$('#croSubIcon').prop("title", "");
	$('#croSubPercentage').css('display', 'none');
	//$('#croSubPercentage').html(formatFloat(totalSerieInfo.totalHasCroSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%");

	$('#engSubIcon').prop("title", "");
	$('#engSubPercentage').css('display', 'none');
	//$('#engSubPercentage').html(formatFloat(totalSerieInfo.totalHasEngSub * 100 / totalSerieInfo.totalEpisodes, 0) + "%");

	$('#croSubIcon').addClass('noSub');
	$('#croSubIcon').removeClass('hasSub');
	$('#engSubIcon').addClass('noSub');
	$('#engSubIcon').removeClass('hasSub');

	if (selectedEpisode.hasCroSub > 0) {
		$('#croSubIcon').addClass('hasSub');
		$('#croSubIcon').removeClass('noSub');
	}
	if (selectedEpisode.hasEngSub > 0) {
		$('#engSubIcon').addClass('hasSub');
		$('#engSubIcon').removeClass('noSub');
	}
	currentImdLink = selectedEpisode.internetLink;
	currentTrailerLink = selectedSerie.trailerLink;
}
function getFullSerie(serieID) {
	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			return serieFullArray[i];
		}
	}
	return getSingleFullSerie(serieID);
}

function getTotalSerieInfo(serie) {
	var totalSerieInfo = {
		totalRuntime: 0,
		totalSize: 0,
		totalHasCroSub: 0,
		totalHasEngSub: 0,
		totalEpisodes: 0,
		totalSelectedEpisodes: 0,
		totalSelectedSeasons: 0,
		minDate: new Date(),
		maxDate: new Date(1800, 1, 1)
	}
	for (var i = 0; i < serie.seasons.length; i++) {
		var totalSeasonInfo = getTotalSeasonInfo(serie.seasons[i]);
		totalSerieInfo.totalRuntime += totalSeasonInfo.totalRuntime;
		totalSerieInfo.totalSize += totalSeasonInfo.totalSize;
		totalSerieInfo.totalHasCroSub += totalSeasonInfo.totalHasCroSub;
		totalSerieInfo.totalHasEngSub += totalSeasonInfo.totalHasEngSub;
		totalSerieInfo.totalEpisodes += totalSeasonInfo.totalEpisodes;
		if (totalSeasonInfo.minDate < totalSerieInfo.minDate) {
			totalSerieInfo.minDate = totalSeasonInfo.minDate;
		}
		if (totalSeasonInfo.maxDate > totalSerieInfo.maxDate) {
			totalSerieInfo.maxDate = totalSeasonInfo.maxDate;
		}
		if (totalSeasonInfo.totalSelectedEpisodes > 0) {
			totalSerieInfo.totalSelectedEpisodes += totalSeasonInfo.totalSelectedEpisodes;
			totalSerieInfo.totalSelectedSeasons++;
		}
	}
	return totalSerieInfo;
}
function getTotalSeasonInfo(season) {
	var totalSeasonInfo = {
		totalRuntime: 0,
		totalSize: 0,
		totalHasCroSub: 0,
		totalHasEngSub: 0,
		totalSelectedEpisodes: 0,
		totalEpisodes: season.episodes.length,
		minDate: new Date(),
		maxDate: new Date(1800, 1, 1)
	}
	for (var i = 0; i < season.episodes.length; i++) {
		totalSeasonInfo.totalRuntime += season.episodes[i].runtime;
		totalSeasonInfo.totalSize += season.episodes[i].size;
		if (season.episodes[i].hasCroSub) {
			totalSeasonInfo.totalHasCroSub++;
		}
		if (season.episodes[i].hasEngSub) {
			totalSeasonInfo.totalHasEngSub++;
		}
		if (new Date(season.episodes[i].airDate) < totalSeasonInfo.minDate) {
			totalSeasonInfo.minDate = new Date(season.episodes[i].airDate);
		}
		if (new Date(season.episodes[i].airDate) > totalSeasonInfo.maxDate) {
			totalSeasonInfo.maxDate = new Date(season.episodes[i].airDate);
		}
		if (selectedEpisodeIdArray.indexOf(season.episodes[i].id) >= 0) {
			totalSeasonInfo.totalSelectedEpisodes++;
		}
	}
	return totalSeasonInfo;
}

function addButtonClick() {
	var item = $('#serieTree').jqxTree('getSelectedItem');
	if (item.value == 'serie') {
		addSerie(parseInt(item.id), true, true);
	}
	else if (item.value == 'season') {
		var serieID = parseInt(item.element.parentNode.parentNode.id);
		addSeason(parseInt(item.id.substring(1)), serieID, true, true);
	}
	else if (item.value == 'episode') {
		var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
		var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
		addEpisode(parseInt(item.id.substring(1)), seasonID, serieID, true);
	}
	localStorage.setItem('selectedSeries', JSON.stringify(selectedSerieArray));
	$('#forSerieAddAnimation').css('display', 'block');
	$("#forSerieAddAnimation").animate({
	    width: "1%",
	    height: "5%",
	    top: "120%"
	}, 500, 'easeInOutSine', function () {
	    $('#forSerieAddAnimation').css('display', 'none');
	    $('#forSerieAddAnimation').css('width', '69%');
	    $('#forSerieAddAnimation').css('height', '100%');
	    $('#forSerieAddAnimation').css('top', '0%');
	});

	//$('#serieTree').jqxTree('removeItem', item);
}
function addSerie(serieID, isFull, addToTreeControl) {
	var selectedSerieFull = null;
	var treeItem = null;
	if (!isSerieSelected(serieID, true)) {
		for (var i = 0; i < serieFullArray.length; i++) {
			if (serieFullArray[i].id == serieID) {
				selectedSerieFull = serieFullArray[i];
				break;
			}
		}
		treeItem = {
			id: selectedSerieFull.id,
			label: selectedSerieFull.name,
			value: 'serie',
			items: new Array()
		}

		//selectedSerieArray.push({
		//    id: serieiD,
		//    array: new Array()
		//});
	}
	else {
		removeSerie(serieID);
		addSerie(serieID, true, true);
		return;
	}
	if (isFull) {
		for (var i = 0; i < selectedSerieFull.seasons.length; i++) {
			treeItem.items.push(addSeason(selectedSerieFull.seasons[i].id, selectedSerieFull.id, true, false));
		}
	}
	if (addToTreeControl) {
		addToTreeRoot('#selectedSerieTree', treeItem);
		updatePercentage(true);
	}
}
function addSeason(seasonID, serieID, isFull, addToTreeControl) {
	var selectedSerie = null;
	var selectedSeason = null;
	var treeItem = null;

	if (!isSerieSelected(serieID, false)) {
		addSerie(serieID, false, true);
	}
	if (!isSeasonSelected(seasonID, serieID, true)) {
		for (var i = 0; i < serieFullArray.length; i++) {
			if (serieFullArray[i].id == serieID) {
				selectedSerie = serieFullArray[i];
				for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
					if (serieFullArray[i].seasons[j].id == seasonID) {
						selectedSeason = serieFullArray[i].seasons[j];
						break;
					}
				}
				break;
			}
		}
		treeItem = {
			id: "S" + selectedSeason.id,
			label: selectedSeason.name,
			value: 'season',
			items: new Array()
		}
	}
	else {
		removeSeason(seasonID, serieID);
		addSeason(seasonID, serieID, true, true);
		return;
	}

	if (isFull) {
		for (var i = 0; i < selectedSeason.episodes.length; i++) {
			treeItem.items.push(addEpisode(selectedSeason.episodes[i].id, selectedSeason.id, selectedSerie.id, false));
		}
	}
	if (addToTreeControl) {
		var serieItem = $('#selectedSerieTree').jqxTree('getItem', { id: selectedSerie.id });
		$('#selectedSerieTree,0 s  +').jqxTree('addTo', treeItem, serieItem);
		updatePercentage(true);
	}
	else {
		return treeItem;
	}
}
function addEpisode(episodeID, seasonID, serieID, addToTreeControl) {
	var selectedSerie = null;
	var selectedSeason = null;
	var selectedEpisode = null;
	if (!isSeasonSelected(seasonID, serieID, false)) {
		addSeason(seasonID, serieID, false, true);
	}

	if (!isEpisodeSelected(episodeID, seasonID, serieID, true)) {
		for (var i = 0; i < serieFullArray.length; i++) {
			if (serieFullArray[i].id == serieID) {
				selectedSerie = serieFullArray[i];
				for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
					if (serieFullArray[i].seasons[j].id == seasonID) {
						selectedSeason = serieFullArray[i].seasons[j];
						for (var k = 0; k < serieFullArray[i].seasons[j].episodes.length; k++) {
							if (serieFullArray[i].seasons[j].episodes[k].id == episodeID) {
								selectedEpisode = serieFullArray[i].seasons[j].episodes[k];
								break;
							}
						}
						break;
					}
				}
				break;
			}
		}
		selectedHDD.sizeSelected += selectedEpisode.size;
		//selectedEpisodeIdArray.push(episodeID);

		if (addToTreeControl) {
			//dohvati element sezone u stablu
			var item = $('#selectedSerieTree').jqxTree('getItem', { id: 'S' + selectedSeason.id });
			//dodaj novi element u stablo
			$('#selectedSerieTree').jqxTree('addTo', {
				id: 'E' + selectedEpisode.id,
				label: selectedEpisode.name,
				value: 'episode',
				items: null
			}, item);
			updatePercentage(true);
		}
		else {
			return {
				id: 'E' + selectedEpisode.id,
				label: selectedEpisode.name,
				value: 'episode',
				items: null
			}
		}

	}
}

function isSerieSelected(serieID, addToList) {
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			return true;
		}
	}
	if (addToList) {
		selectedSerieArray.push({
			id: serieID,
			array: new Array()
		});
	}
	return false;
}
function isSeasonSelected(seasonID, serieID, addToList) {
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			for (var j = 0; j < selectedSerieArray[i].array.length; j++) {
				if (selectedSerieArray[i].array[j].id == seasonID) {
					return true;
				}
			}
			if (addToList) {
				selectedSerieArray[i].array.push({
					id: seasonID,
					array: new Array()
				});
			}
		}
	}
	return false;
}
function isEpisodeSelected(episodeID, seasonID, serieID, addToList) {
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			for (var j = 0; j < selectedSerieArray[i].array.length; j++) {
				if (selectedSerieArray[i].array[j].id == seasonID) {
					for (var k = 0; k < selectedSerieArray[i].array[j].array.length; k++) {
						if (selectedSerieArray[i].array[j].array[k].id == episodeID) {
							return true;
						}
					}
					if (addToList) {
						selectedSerieArray[i].array[j].array.push({
							id: episodeID,
							array: null
						});
					}
				}
			}
		}
	}
	return false;
}

function removeButtonClick() {
	var item = $('#selectedSerieTree').jqxTree('getSelectedItem');
	//$('#selectedSerieTree').jqxTree('removeItem', item);
	if (item.value == 'serie') {
		removeSerie(parseInt(item.id));
	}
	else if (item.value == 'season') {
		var serieID = parseInt(item.element.parentNode.parentNode.id);
		removeSeason(parseInt(item.id.substring(1)), serieID);
	}
	else if (item.value == 'episode') {
		var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
		var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
		removeEpisode(parseInt(item.id.substring(1)), seasonID, serieID);
	}
	localStorage.setItem('selectedSeries', JSON.stringify(selectedSerieArray));
}
function removeSerie(serieID) {
	var selectedSerieFull = null;
	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerieFull = serieFullArray[i];
			break;
		}
	}
	//makni seriju iz stabla
	var serieItem = $('#selectedSerieTree').jqxTree('getItem', { id: serieID });
	$('#selectedSerieTree').jqxTree('removeItem', serieItem);

	//makni svaku sezonu
	for (var i = 0; i < selectedSerieFull.seasons.length; i++) {
		removeSeason(selectedSerieFull.seasons[i].id, serieID);
	}

	//makni seriju iz liste odabranog
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			selectedSerieArray.splice(i, 1);
			break;
		}
	}
}
function removeSeason(seasonID, serieID) {
	var selectedSerie = null;
	var selectedSeason = null;

	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerie = serieFullArray[i];
			for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
				if (serieFullArray[i].seasons[j].id == seasonID) {
					selectedSeason = serieFullArray[i].seasons[j];
					break;
				}
			}
			break;
		}
	}
	//makni sezonu iz stabla
	var seasonItem = $('#selectedSerieTree').jqxTree('getItem', { id: "S" + seasonID });
	$('#selectedSerieTree').jqxTree('removeItem', seasonItem);

	

	//makni svaku epizodu
	for (var i = 0; i < selectedSeason.episodes.length; i++) {
		removeEpisode(selectedSeason.episodes[i].id, seasonID, serieID);
	}

	//makni sezonu iz liste odabranog
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			for (var j = 0; j < selectedSerieArray[i].array.length; j++) {
				if (selectedSerieArray[i].array[j].id == seasonID) {
					selectedSerieArray[i].array.splice(j, 1);
					break;
				}
			}
			break;
		}
	}

	if ($('#selectedSerieTree').jqxTree('getItem', { id: serieID }).hasItems == false) {
		//makni seriju iz stabla
		var serieItem = $('#selectedSerieTree').jqxTree('getItem', { id: serieID });
		$('#selectedSerieTree').jqxTree('removeItem', serieItem);

		//makni seriju iz liste odabranog
		for (var i = 0; i < selectedSerieArray.length; i++) {
			if (selectedSerieArray[i].id == serieID) {
				selectedSerieArray.splice(i, 1);
				break;
			}
		}
	}
}
function removeEpisode(episodeID, seasonID, serieID) {
	var selectedSerie = null;
	var selectedSeason = null;
	var selectedEpisode = null;

	for (var i = 0; i < serieFullArray.length; i++) {
		if (serieFullArray[i].id == serieID) {
			selectedSerie = serieFullArray[i];
			for (var j = 0; j < serieFullArray[i].seasons.length; j++) {
				if (serieFullArray[i].seasons[j].id == seasonID) {
					selectedSeason = serieFullArray[i].seasons[j];
					for (var k = 0; k < serieFullArray[i].seasons[j].episodes.length; k++) {
						if (serieFullArray[i].seasons[j].episodes[k].id == episodeID) {
							selectedEpisode = serieFullArray[i].seasons[j].episodes[k];
							break;
						}
					}
					break;
				}
			}
			break;
		}
	}
	//makni epizodu iz stabla
	var episodeItem = $('#selectedSerieTree').jqxTree('getItem', { id: "E" + episodeID });
	$('#selectedSerieTree').jqxTree('removeItem', episodeItem);

	//makni epizodu iz liste odabranog
	for (var i = 0; i < selectedSerieArray.length; i++) {
		if (selectedSerieArray[i].id == serieID) {
			for (var j = 0; j < selectedSerieArray[i].array.length; j++) {
				if (selectedSerieArray[i].array[j].id == seasonID) {
					for (var k = 0; k < selectedSerieArray[i].array[j].array.length; k++) {
						if (selectedSerieArray[i].array[j].array[k].id == episodeID) {
							selectedSerieArray[i].array[j].array.splice(k, 1);
							selectedHDD.sizeSelected -= selectedEpisode.size;
							break;
						}
					}
					break;
				}
			}
			break;
		}
	}


	//selectedEpisodeIdArray.push(episodeID);
	updatePercentage();
}

// ============================================================
//                          MAIN RESIZE
// ============================================================
function resize() {
	var windowWidth = $(window).width(); //retrieve current window width
	var windowHeight = $(window).height();
	$('#resolution').html(windowWidth + ' x ' + windowHeight + ' (' + formatFloat(windowWidth / windowHeight, 2) + ')');
	initInput();
	//getSeriesCompact();
	//$("#serieTree").jqxTree('refresh');
	//$("#movieListBox").jqxListBox.refresh();
	var width = $('#listboxDiv').width();
	var height = $('#listboxDiv').height() - $('#listSearch').height() - 20;
	$("#serieTree").width(width);
	$("#serieTree").height(height);
	$("#panelserieTree").width(width);
	$("#panelserieTree").height(height);

	$("#selectedSerieTree").width(width);
	$("#selectedSerieTree").height(height);
	$("#panelselectedSerieTree").width(width);
	$("#panelselectedSerieTree").height(height);

	$('#panelserieTreehorizontalScrollBar').css('display', 'none');
	$('#bottomRightmovieListBox').css('display', 'none');
	//$("#listBoxContentmovieListBox>div").width(width);
	//$("#listBoxContentmovieListBox>div").height(height);
	//vertical scroll bar
	//$('#verticalScrollBarmovieListBox').height(height);
	//$('#verticalScrollBarmovieListBox').css('left', width - 20 + 'px');
	//$('#jqxScrollBtnDownverticalScrollBarmovieListBox').css('top', height - 15 + 'px');
	//$('#jqxScrollAreaDownverticalScrollBarmovieListBox').css('height', height - 60 + 'px');
	//horizontal scroll bar);
	//$('#horizontalScrollBarmovieListBox').css('display', 'none');
	//$('#bottomRightmovieListBox').css('display', 'none');
	//$('#horizontalScrollBarmovieListBox').width(width);
	//$('#horizontalScrollBarmovieListBox').css('top', height - 20 + 'px');
}

//#endregion

//#region EVENT HANDLERS
// =========================================================================
//                             EVENT HANDLERS
// =========================================================================

function showSelectedButtonClick() {
	serieFilter.showSelected = !serieFilter.showSelected;
	if (serieFilter.showSelected) {
		//$('#addButton').removeClass('addButton');
		//$('#addButton').addClass('removeButton');

		$('#showSelectedButton').html('NEODABRANO');
		$('#addButton').css('display', 'none');
		$('#removeButton').css('display', 'block');
		$('#selectedSerieTree').css('display', 'block');
		$('#serieTree').css('display', 'none');
		try {
			$('#selectedSerieTree').fireEvent("select");
		}
		catch (error) {

		}
	}
	else {
		//$('#addButton').addClass('addButton');
		//$('#addButton').removeClass('removeButton');

		$('#showSelectedButton').html('ODABRANO');
		$('#addButton').css('display', 'block');
		$('#removeButton').css('display', 'none');
		$('#selectedSerieTree').css('display', 'none');
		$('#serieTree').css('display', 'block');
		try {
			var item = $('#serieTree').jqxTree('getSelectedItem')
			if (item.value == 'serie') {
				changeSerieInfo(parseInt(item.id), item.label);
			}
			else if (item.value == 'season') {
				if (item.element.parentNode.parentNode.id.indexOf('S') >= 0) {
					var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
					changeSeasonInfo(parseInt(item.id.substring(1)), serieID);
					//$('#serieTree').jqxTree('selectItem', {id: item);
				}
				else {
					var serieID = parseInt(item.element.parentNode.parentNode.id);
					changeSeasonInfo(parseInt(item.id.substring(1)), serieID);
				}
			}
			else if (item.value == 'episode') {
				if (item.element.parentNode.parentNode.parentNode.parentNode.id.indexOf('E') >= 0) {
					var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
					var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.id);
					changeEpisodeInfo(parseInt(item.id.substring(1)), seasonID, serieID);
				}
				else {
					var seasonID = parseInt(item.element.parentNode.parentNode.id.substring(1));
					var serieID = parseInt(item.element.parentNode.parentNode.parentNode.parentNode.id);
					changeEpisodeInfo(parseInt(item.id.substring(1)), seasonID, serieID);
				}
			}
		}
		catch (error) {

		}
	}
	//initTree();
}

//#endregion

//#region ON LOAD
// =========================================================================
//                                  ON LOAD
// =========================================================================
$(function () {
	initTree();
	getSeriesCompact("#serieTree");	
	initInput();
	$('#addButton').click(function () {
		addButtonClick();
	});
	$('#removeButton').click(function () {
		removeButtonClick();
	});
	$('#showSelectedButton').click(function () {
		showSelectedButtonClick();
	});
	$('#listSearch').keyup(function () {
		serieFilter.name = $('#listSearch').val();
		if (serieFilter.showSelected) {
			filterSeries("#selectedSerieTree");
		}
		else {
			filterSeries("#serieTree");
		}
	});
	$('#imdbIcon').click(function () {
		if (currentImdLink != '' && currentImdLink != null) {
			if (currentImdLink.indexOf('http:') < 0) {
				window.open('http://' + currentImdLink, '_blank');
			}
			else {
				window.open(currentImdLink, '_blank');
			}
		}
	});
	$('#trailerIcon').click(function () {
		if (currentTrailerLink != '' && currentTrailerLink != null) {
			if (currentTrailerLink.indexOf('search_query') >= 0) {
				window.open(currentTrailerLink, '_blank');
				document.getElementById("trailerFrame").src = '';
			}
			else {
				var youtubeID = currentTrailerLink.substring(currentTrailerLink.indexOf("?v=") + 3);
				document.getElementById("trailerFrame").src = "http://www.youtube.com/embed/" + youtubeID;

				$('#trailerWindow').css('display', 'block');
				$('#trailerWindowContent').jqxWindow('open');
			}
		}
	});
	initFilterContent();
	$('#filters2').css('display', 'none');

	$("#serieTree").keyup(function (event) {
	    if (event.keyCode == 13) {
	        addButtonClick();
	    }
	});
	$("#selectedSerieTree").keyup(function (event) {
	    if (event.keyCode == 13) {
	        removeButtonClick();
	    }
	});
	//isFirstLoad = false;
})
function initFilterContent() {
	$("#selectGenre").multiselect({
		buttonWidth: $('#selectGenreDiv').width(),
		buttonText: function (options, select) {
			if (options.length == 0) {
				return "Odaberi zanrove" + ' <b class="caret"></b>';
			}
			else {
				if (options.length > 3) {
					return options.length + " odabrano" + ' <b class="caret"></b>';
				}
				else {
					var selected = '';
					options.each(function () {
						var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).html();
						selected += label + ', ';
					});
					return selected.substr(0, selected.length - 2) + ' <b class="caret"></b>';
				}
			}

		},
		onChange: function (option, checked) {
			var genre = option.context.id;
			if (checked) {
				serieFilter.genre.push(genre);
			}
			else {
				if (serieFilter.genre.indexOf(genre) >= 0) {
					serieFilter.genre.splice(serieFilter.genre.indexOf(genre), 1);
				}
			}
		},
		maxHeight: $('#filters2').height()
	});
	$("#sortSelectProperty").multiselect({
		buttonWidth: $('#sortSelectContent').width(),
		buttonText: function (options, select) {
			if (options.length == 0) {
				return "Odaberi atribut za sortiranje" + ' <b class="caret"></b>';
			}
			else {
				if (options.length > 3) {
					return options.length + " odabrano" + ' <b class="caret"></b>';
				}
				else {
					var selected = '';
					options.each(function () {
						var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).html();

						selected += label + ', ';
					});
					return selected.substr(0, selected.length - 2) + ' <b class="caret"></b>';
				}
			}
		},
		maxHeight: $('#filters2').height(),
		onChange: function (option, checked) {
			var sortProp = option.context.value;
			serieFilter.sortProperty = sortProp;
			sortPropertyChanged = true;
		},

	});	

	$('#applyFiltersButton').click(function () {
		//sessionStorage.setItem('movieFilter', JSON.stringify(serieFilter));
		//if (dateLastVisited != null) {
		//	movieFilter.addedAfterDate = dateLastVisited;
		//}
		if (serieFilter.showSelected) {
			filterSeries("#selectedSerieTree");
		}
		else {
			filterSeries("#serieTree");
		}
	});
	//$('#selectGenreDiv input').iCheck({
	//	checkboxClass: 'icheckbox_polaris',
	//	radioClass: 'iradio_futurico',
	//	increaseArea: '20%' // optional
	//});	
	$('#resetFiltersButton').click(function () {
		$("#ratingSlider").val([ratingMin, ratingMax]);
		$('option', $("#selectGenre")).each(function (element) {
			$("#selectGenre").multiselect('deselect', $(this).val());
		});
		serieFilter.genre = new Array();
		$('option', $("#sortSelectProperty")).each(function (element) {
			$("#sortSelectProperty").multiselect('deselect', $(this).val());
		});
		serieFilter.sortProperty = 'name';
		//sortPropertyChanged = true;

		$("#imdbMinLabel").html($("#ratingSlider").val()[0].substring(0, $("#ratingSlider").val()[0].length - 1));
		$("#imdbMaxLabel").html($("#ratingSlider").val()[1].substring(0, $("#ratingSlider").val()[1].length - 1));
		serieFilter.minRating = $("#ratingSlider").val()[0];
		serieFilter.maxRating = $("#ratingSlider").val()[1];
	});
	initSliders();
}
function initSliders() {
	$("#ratingSlider").noUiSlider({
		start: [1, 10],
		connect: true,
		range: {
			'min': 1,
			'max': 10
		}
	});
	$("#ratingSlider").on({
		slide: function () {
			$("#imdbMinLabel").html($("#ratingSlider").val()[0].substring(0, $("#ratingSlider").val()[0].length - 1));
			$("#imdbMaxLabel").html($("#ratingSlider").val()[1].substring(0, $("#ratingSlider").val()[1].length - 1));
			serieFilter.minRating = $("#ratingSlider").val()[0];
			serieFilter.maxRating = $("#ratingSlider").val()[1];
		}
	});	
}


//#endregion

//#region FUNCTION AND EVENT BINDING
// =========================================================================
//                         FUNCTION AND EVENT BINDING
// =========================================================================
if (!window.addEventListener) {
	window.attachEvent('onresize', function () {
		resize();
	});
}
else {
	window.addEventListener(orientationEvent, function () {
		resize();
	}, false);
}

window.onload = function () {
	resize();
}
//#endregion

